package org.blbulyandavbulyan.jseminars.seminar3.classwork;

import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Collectors;

//üìå –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–ª–∞–Ω–µ—Ç –°–æ–ª–Ω–µ—á–Ω–æ–π
//—Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏.
//üìå –í—ã–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø–ª–∞–Ω–µ—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ
//–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ.
//–ü—Ä–æ–π—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–∏—Ç—å
//–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã.

public class Task2 {
    //—Ä–∞–∑ —É–∂ –∑–∞–ø–∏—Ö–Ω—É–ª —Å—Ç—Ä–∏–º—ã, —Ç–æ –ø–∏—Ö–∞—é –∏—Ö –¥–æ –∫–æ–Ω—Ü–∞
    public static void main(String[] args) {
        String[] pl = { "–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–í–µ–Ω–µ—Ä–∞", "–ú–∞—Ä—Å", "–ó–µ–º–ª—è", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–£—Ä–∞–Ω", "–ù–µ–ø—Ç—É–Ω" };
//        String [] pl = {"d", "d", "d", "a", "F", "F"};
        List<String> listOfPlanets = toList(pl);
        System.out.println(calculateDuplicates(listOfPlanets));
        System.out.println(listOfPlanets);
        List<String> planetsWithoutDuplicates = removeDuplicates(listOfPlanets);
        System.out.println(planetsWithoutDuplicates);
    }

    public static  <T>List<T> removeDuplicates(List<T> list){
        return list.stream().distinct().toList();
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ T –≤ List<T>
     * @param arr –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤
     * @return —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ arr
     * @param <T> —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ –∏ —Å–ø–∏—Å–∫–µ
     */
    public static <T>List<T> toList(T[] arr){
        return Arrays.stream(arr).toList();
    }

    /**
     * –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
     * @param data –∫–æ–ª–ª–µ–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
     * @return Map, –≥–¥–µ –∫–ª—é—á - —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
     * @param <T> —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
     */
    public static <T> Map<T, Integer> calculateDuplicates(Collection<T> data){
        return data.stream().collect(Collectors.toMap(Function.identity(), (v)-> 1, Integer::sum));
    }
}
